// Code generated by i18ngo. DO NOT EDIT.
package translations

import (
	"bytes"
	"html/template"
)

// Translator is implemented by all language translators.
type Translator interface {
	MyGreeting(count int, name string) (string, error)
}

// Lang represents available translated languages.
type Lang string

const (
	LangEn Lang = "en"
	LangEs Lang = "es"
)

// NewTranslators initializes all translators.
func NewTranslators() map[Lang]Translator {
	return map[Lang]Translator{
		LangEn: newEn(),
		LangEs: newEs(),
	}
}

type en struct {
	MyGreetingDft        *template.Template
	MyGreetingCustom0 *template.Template
	MyGreetingCustom1 *template.Template
}

func newEn() *en {
	return &en{
		MyGreetingDft:        template.Must(template.New("MyGreeting").Parse("Hello {{ .Name }}! You have {{ .Count }} messages.")),
		MyGreetingCustom0: template.Must(template.New("MyGreetingCustom0").Parse("Hello {{ .Name }}! You have {{ .Count }} message.")),
		MyGreetingCustom1: template.Must(template.New("MyGreetingCustom1").Parse("Hello {{ .Name }}! You have no messages.")),
	}
}

// MyGreeting renders a properly translated message.
func (t *en) MyGreeting(count int, name string) (string, error) {
	data := struct {
		Count int
		Name  string
	}{
		Count: count,
		Name:  name,
	}
	var tmpl *template.Template
	switch {
	case count == 1:
		tmpl = t.MyGreetingCustom0
	case count == 0:
		tmpl = t.MyGreetingCustom1
	default:
		tmpl = t.MyGreetingDft
	}
	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		return "", err
	}
	return buf.String(), nil
}

type es struct {
	MyGreetingDft        *template.Template
	MyGreetingCustom0 *template.Template
	MyGreetingCustom1 *template.Template
}

func newEs() *es {
	return &es{
		MyGreetingDft:        template.Must(template.New("MyGreeting").Parse("Hola {{ .Name }}! Tienes {{ .Count }} mensajes.")),
		MyGreetingCustom0: template.Must(template.New("MyGreetingCustom0").Parse("Hola {{ .Name }}! Tienes {{ .Count }} mensaje.")),
		MyGreetingCustom1: template.Must(template.New("MyGreetingCustom1").Parse("Hola {{ .Name }}! No tienes ning√∫n mensaje.")),
	}
}

// MyGreeting renders a properly translated message.
func (t *es) MyGreeting(count int, name string) (string, error) {
	data := struct {
		Count int
		Name  string
	}{
		Count: count,
		Name:  name,
	}
	var tmpl *template.Template
	switch {
	case count == 1:
		tmpl = t.MyGreetingCustom0
	case count == 0:
		tmpl = t.MyGreetingCustom1
	default:
		tmpl = t.MyGreetingDft
	}
	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		return "", err
	}
	return buf.String(), nil
}
