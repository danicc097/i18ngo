package templates

import (
	"fmt"
	"github.com/kenshaw/snaker"
)

gotempl TranslationCode(data *TemplateData) #{
	// Code generated by i18ngo. DO NOT EDIT.

	package %{ data.PkgName+"\n" }%
	import (
		"bytes"
		"html/template"
	)

	// Translator is implemented by all language translators.
	type Translator interface {
		{{ for _, msg := range data.Messages }}
%{ msg.MethodName }% (%{ msg.Args }%) (string, error)
		{{ end }}
	}

	// Lang represents available translated languages.
	type Lang string

	const (
		{{ for _, lang := range data.Langs }}
	Lang%{ lang.CamelLang }% Lang = "%{ lang.Lang }%"

		{{ end }}
	)

	// NewTranslators initializes all translators.
	func NewTranslators() map[Lang]Translator {
		return map[Lang]Translator{
			{{ for _, lang := range data.Langs }}
	Lang%{ lang.CamelLang }% : new%{ lang.CamelLang }%(),
			{{ end }}
	}
	}

	{{ for _, trl := range data.Translations }}
	{{ lang := snaker.ForceLowerCamelIdentifier(trl.CamelLang) }}
	type %{ lang }% struct {}

		func new%{ trl.CamelLang }% () *%{ lang }% {
			return &%{ lang }%{}
		}

		{{ for _, msg := range trl.Messages }}
	// %{ msg.MethodName }% renders a properly translated message.
		func (t *%{ lang }% ) %{ msg.MethodName }% (%{ msg.Args }%) (string, error) {
			data := struct {
				{{ for _, v := range msg.Vars }}
	%{ fmt.Sprintf("%s %s \n", v.Name, v.Type) }%
{{ end }}
	}{
				{{ for _, v := range msg.Vars }}
	%{ fmt.Sprintf("%s: %s,\n", v.Name, v.Param) }%
{{ end }}
	}

			{{ if len(msg.CustomTemplates) > 0 }}
	switch {
					{{ for _, ct := range msg.CustomTemplates }}
	case %{ ct.Expression }%:
						tmpl, err := template.New("custom").Parse("%{ ct.Template }%")
						if err != nil {
							return "", err
						}
						var buf bytes.Buffer
						if err := tmpl.Execute(&buf, data); err != nil {
							return "", err
						}
						return buf.String(), nil
					{{ end }}
	}
			{{ end }}
	tmpl, err := template.New("message").Parse("%{ msg.Template }%")
			if err != nil {
				return "", err
			}
			var buf bytes.Buffer
			if err := tmpl.Execute(&buf, data); err != nil {
				return "", err
			}
			return buf.String(), nil
		}
		{{ end }}
{{ end }}
}#
